#!/bin/bash

# Prevent filename expansion (like **/*.* file pattern)
set -f

# The error variable is used in src/options-parser.sh and src/options-validator.sh
has_error=false

#############################
# Assign colors variables
#############################
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

#############################
# Assign help_message variable
#############################
help_message="Usage: accent [OPERATION] [OPTION]...
Sync, merge and export with the Accent API

  --api-url            URL of the Accent API endpoint
  --api-key            key that identify the API Client, you can find it in your project’s settings

  --input-file         file that will be sent to Accent on a sync or merge
  --input-directory    directory that will be zipped and then sent to Accent on a sync or merge
                       This is useful for multi-file projects
  --language           language identifier
  --merge-type         merge type parameter that will be sent to Accent
                       Available merge types: smart, force and passive
  --format             format parameter that will be sent to Accent
                       Available format: ios, android, rails, json, es6_module
  --output-file        file that will be written upon receiveing a file from Accent
  --output-directory   directory that will be written and unzipped upon receiveing a zip from Accent

  --help               show this message

Examples:
  accent sync --input-file=locale.json --language=fr
  accent merge --input-file=activerecord.en.yml --language=en
  accent export --format=json --language=en --output-file=new-locale.json

This package only execute cUrl command. Here is a mapping of an accent cli command vs a cUrl command:

  accent sync
    --api-url=http://accent-url.net
    --api-key=test123
    --input-file=locale.json
    --language=fr

  curl 'http://accent-url.net/sync'
    -F filepath=locale.json
    -F file=@locale.json
    -F language=fr
    -H 'Authorization: Bearer test1234'"

#############################
# Parse cli args
# This could exit with the status 1
#############################
while [ $# -gt 0 ]; do
  case "$1" in
    export) url="export" operation="export" ;;
    sync) url="sync" operation="sync" ;;
    sync-peek) url="sync/peek" operation="sync" ;;
    merge) url="merge" operation="merge" ;;
    merge-peek) url="merge/peek" operation="merge" ;;
    --api-key=*) API_KEY="${1#*=}" ;;
    --api-url=*) API_URL="${1#*=}" ;;
    --filepath=*) filepath="${1#*=}" ;;
    --input-file=*) input_file="${1#*=}" ;;
    --input-directory=*) input_directory="${1#*=}" ;;
    --language=*) file_language="${1#*=}" ;;
    --merge-type=*) merge_type="${1#*=}" ;;
    --format=*) file_format="${1#*=}" ;;
    --order-by=*) file_key_order="${1#*=}" ;;
    --output-file=*) output_file="${1#*=}" ;;
    --help)
      printf "$help_message"
      exit 0
      ;;
    *)
      printf "${UWhite}Argument error:${Color_Off} cannot parse \'$1\'\n"
      has_error=true
  esac
  shift
done

#############################
# Validate options presence and context relevence
# This could exit with the status 1
#############################
if [ -z "$API_KEY" ]; then
  printf "${UWhite}Parameter error:${Color_Off} \`--api-key\` must be set, you’ll find the value in your project settings\n"
  has_error=true
fi

if [ -z "$API_URL" ]; then
  printf "${UWhite}Parameter error:${Color_Off} \`--api-url\` must be set to a valid URL\n"
  has_error=true
fi

if [ -n "$input_directory" ] && [ ! -d "$input_directory" ]; then
  printf "${UWhite}Parameter error:${Color_Off} \`$input_directory\` must be a directory\n"
  has_error=true
fi

if [ -n "$input_file" ] && [ ! -e "$input_file" ]; then
  printf "${UWhite}Parameter error:${Color_Off} \`$input_file\` must be a file\n"
  has_error=true
fi

if [ -z "$file_language" ]; then
  printf "${UWhite}Parameter error:${Color_Off} \`--language\` parameter must be set (Maybe try something like --language=fr)\n"
  has_error=true
fi

if [ "$operation" = "export" ] && [ -z "$file_format" ]; then
  printf "${UWhite}Parameter error:${Color_Off} \`--format\` parameter must be set on an export operation\n"
  has_error=true
fi

if [ "$operation" = "export" ] && [ -z "$output_file" ]; then
  printf "${UWhite}Parameter error:${Color_Off} \`--output-file\` parameter must be set on an export operation\n"
  has_error=true
fi

if [ "$operation" = "sync" ] && [ -z "$input_file" ]; then
  if [ -z "$input_directory" ]; then
    printf "${UWhite}Parameter error:${Color_Off} \`--input-file\` or \`--input-directory\` parameter must be set on a sync operation\n"
    has_error=true
  fi
fi

if [ "$operation" = "merge" ] && [ -z "$input_file" ]; then
  if [ -z "$input_directory" ]; then
    printf "${UWhite}Parameter error:${Color_Off} \`--input-file\` or \`--input-directory\` parameter must be set on a merge operation\n"
    has_error=true
  fi
fi

if [ -n "$output_file" ] && [ -e "$output_file" ] && [ $has_error != "true" ]; then
  printf "${UWhite}Existing file:${Color_Off} $output_file already exists, do you want to overwrite it? Y/n: "

  read overwrite_output_file

  if [ ! "$overwrite_output_file" == "Y" ]; then
    has_error=true
  fi
fi

if [ $has_error == "true" ]; then
  printf "${URed}Error:${Color_Off} ${Red}Cannot complete operation${Color_Off}\n"
  exit 1
fi

#############################
# Zip the directory if input-directory option is used and set filepath default if necessary
#############################
if [ -n "$input_directory" ] && [ -d "$input_directory" ]; then
  zip -qr $input_directory $input_directory
  input_file="$input_directory".zip
fi

if [ -z "$filepath" ] && [ -n "$input_directory" ]; then
  filepath=**/*.*
fi

if [ -z "$filepath" ] && [ -n "$input_file" ]; then
  filepath=$input_file
fi

#############################
# Do the cUrl call
# Last operation so the script can be piped like a normal cUrl command
#############################
case $operation in
  export)
    curl "$API_URL/$url?format=$file_format&language=$file_language&order_by=$file_key_order" \
      -s \
      -H 'Authorization: Bearer '"$API_KEY"'' \
      > "$output_file"
    ;;
  sync)
    curl "$API_URL/$url" \
      -s \
      -F filepath=$filepath \
      -F file=@$input_file \
      -F language=$file_language \
      -H 'Authorization: Bearer '"$API_KEY"''
    ;;
  merge)
    curl "$API_URL/$url" \
      -s \
      -F filepath=$filepath \
      -F file=@$input_file \
      -F language=$file_language \
      -F merge_type=$merge_type \
      -H 'Authorization: Bearer '"$API_KEY"''
    ;;
  *)
    printf "${UWhite}Argument error:${Color_Off} unknown command. Try --help.\n"
    exit 1
    ;;
esac
